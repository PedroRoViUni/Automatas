// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: AE.lex

import java_cup.runtime.Symbol;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class AE implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int A = 2;
  public static final int B = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\4\1\22\0\1\2\31\0\1\3\6\0\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\2\0\1\12\4\0"+
    "\1\13\1\0\1\14\2\0\1\15\1\0\1\16\13\0"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\0"+
    "\1\26\2\0\1\27\1\30\1\31\1\32\1\33\1\0"+
    "\1\34\1\35\1\36\1\37\1\40\1\0\1\41\14\0"+
    "\1\1\155\0\1\42\6\0\1\43\u012d\0\2\1\326\0"+
    "\u0100\1";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\27\2\16\0\16\1\1\4"+
    "\17\0\17\1\17\0\1\5\1\0\17\1\1\5\1\1"+
    "\20\0\20\1\20\0\20\1\20\0\20\1\5\0\1\6"+
    "\3\0\1\7\6\0\5\1\1\6\3\1\1\7\6\1"+
    "\13\0\1\10\2\0\13\1\1\10\2\1\15\0\15\1"+
    "\1\11\3\0\1\12\6\0\1\13\1\0\1\11\3\1"+
    "\1\12\6\1\1\13\1\1\3\0\1\14\4\0\1\15"+
    "\1\16\1\0\3\1\1\14\4\1\1\15\1\16\1\1"+
    "\6\0\1\17\1\0\6\1\1\17\1\1\4\0\1\20"+
    "\2\0\4\1\1\20\2\1\3\0\1\21\1\0\1\22"+
    "\3\1\1\21\1\1\1\22\3\0\1\23\3\1\1\23"+
    "\3\0\3\1\3\0\3\1\1\0\1\24\1\0\1\1"+
    "\1\24\1\1\2\0\2\1\1\0\1\25\1\1\1\25"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\2\26";

  private static int [] zzUnpackAction() {
    int [] result = new int[442];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\110\0\154\0\220\0\264\0\330"+
    "\0\374\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4\0\u01f8"+
    "\0\u021c\0\u0240\0\u0264\0\u0288\0\u02ac\0\u02d0\0\u02f4\0\u0318"+
    "\0\u033c\0\u0360\0\u0384\0\u03a8\0\u03cc\0\u03f0\0\u0414\0\u0438"+
    "\0\u045c\0\u0480\0\u04a4\0\u04c8\0\u04ec\0\u0510\0\u0534\0\u0558"+
    "\0\u057c\0\u01f8\0\u05a0\0\u05c4\0\u05e8\0\u060c\0\u0630\0\u0654"+
    "\0\u0678\0\u069c\0\u06c0\0\u06e4\0\u0708\0\u072c\0\u0750\0\110"+
    "\0\u0774\0\u0798\0\u07bc\0\u07e0\0\u0804\0\u0828\0\u084c\0\u0870"+
    "\0\u0894\0\u08b8\0\u08dc\0\u0900\0\u0924\0\u0948\0\u096c\0\u0990"+
    "\0\u09b4\0\u09d8\0\u09fc\0\u0a20\0\u0a44\0\u0a68\0\u0a8c\0\u0ab0"+
    "\0\u0ad4\0\u0af8\0\u0b1c\0\u0b40\0\u0b64\0\u0b88\0\u0bac\0\u0bd0"+
    "\0\u0bf4\0\u0c18\0\u0c3c\0\u0c60\0\u0c84\0\u0ca8\0\u0ccc\0\u0cf0"+
    "\0\u0d14\0\u0d38\0\u0d5c\0\u0d80\0\u0da4\0\110\0\u0dc8\0\u0dec"+
    "\0\u0e10\0\u0e34\0\u0e58\0\u0e7c\0\u0ea0\0\u0ec4\0\u0ee8\0\u0f0c"+
    "\0\u0f30\0\u0f54\0\u0f78\0\u0f9c\0\u0fc0\0\u0fe4\0\u01f8\0\u1008"+
    "\0\u102c\0\u1050\0\u1074\0\u1098\0\u10bc\0\u10e0\0\u1104\0\u1128"+
    "\0\u114c\0\u1170\0\u1194\0\u11b8\0\u11dc\0\u1200\0\u1224\0\u1248"+
    "\0\u126c\0\u1290\0\u12b4\0\u12d8\0\u12fc\0\u1320\0\u1344\0\u1368"+
    "\0\u138c\0\u13b0\0\u13d4\0\u13f8\0\u141c\0\u1440\0\u1464\0\u1488"+
    "\0\u14ac\0\u14d0\0\u14f4\0\u1518\0\u153c\0\u1560\0\u1584\0\u15a8"+
    "\0\u15cc\0\u15f0\0\u1614\0\u1638\0\u165c\0\u1680\0\u16a4\0\u16c8"+
    "\0\u16ec\0\u1710\0\u1734\0\u1758\0\u177c\0\u17a0\0\u17c4\0\u17e8"+
    "\0\u180c\0\u1830\0\u1854\0\u1878\0\u189c\0\u18c0\0\u18e4\0\u1908"+
    "\0\u192c\0\u1950\0\u1974\0\u1998\0\u19bc\0\u19e0\0\u1a04\0\u1a28"+
    "\0\u1a4c\0\u1a70\0\u1a94\0\u1ab8\0\u1adc\0\u1b00\0\u1b24\0\u1b48"+
    "\0\u1b6c\0\u1b90\0\u1bb4\0\u1bd8\0\u1bfc\0\u1c20\0\u1c44\0\u1c68"+
    "\0\u1c8c\0\u1cb0\0\u1cd4\0\u1cf8\0\u1d1c\0\u1d40\0\u1d64\0\u1d88"+
    "\0\u1dac\0\u1dd0\0\u1df4\0\u1e18\0\u1e3c\0\110\0\u1e60\0\u1e84"+
    "\0\u1ea8\0\110\0\u1ecc\0\u1ef0\0\u1f14\0\u1f38\0\u1f5c\0\u1f80"+
    "\0\u1fa4\0\u1fc8\0\u1fec\0\u2010\0\u2034\0\u01f8\0\u2058\0\u207c"+
    "\0\u20a0\0\u01f8\0\u20c4\0\u20e8\0\u210c\0\u2130\0\u2154\0\u2178"+
    "\0\u219c\0\u21c0\0\u21e4\0\u2208\0\u222c\0\u2250\0\u2274\0\u2298"+
    "\0\u22bc\0\u22e0\0\u2304\0\110\0\u2328\0\u234c\0\u2370\0\u2394"+
    "\0\u23b8\0\u23dc\0\u2400\0\u2424\0\u2448\0\u246c\0\u2490\0\u24b4"+
    "\0\u24d8\0\u01f8\0\u24fc\0\u2520\0\u2544\0\u2568\0\u258c\0\u25b0"+
    "\0\u25d4\0\u25f8\0\u261c\0\u2640\0\u2664\0\u2688\0\u26ac\0\u26d0"+
    "\0\u26f4\0\u2718\0\u273c\0\u2760\0\u2784\0\u27a8\0\u27cc\0\u27f0"+
    "\0\u2814\0\u2838\0\u285c\0\u2880\0\u28a4\0\u28c8\0\110\0\u28ec"+
    "\0\u2910\0\u2934\0\110\0\u2958\0\u297c\0\u29a0\0\u29c4\0\u29e8"+
    "\0\u2a0c\0\110\0\u2a30\0\u01f8\0\u2a54\0\u2a78\0\u2a9c\0\u01f8"+
    "\0\u2ac0\0\u2ae4\0\u2b08\0\u2b2c\0\u2b50\0\u2b74\0\u01f8\0\u2b98"+
    "\0\u2bbc\0\u2be0\0\u2c04\0\110\0\u2c28\0\u2c4c\0\u2c70\0\u2c94"+
    "\0\110\0\110\0\u2cb8\0\u2cdc\0\u2d00\0\u2d24\0\u01f8\0\u2d48"+
    "\0\u2d6c\0\u2d90\0\u2db4\0\u01f8\0\u01f8\0\u2dd8\0\u2dfc\0\u2e20"+
    "\0\u2e44\0\u2e68\0\u2e8c\0\u2eb0\0\110\0\u2ed4\0\u2ef8\0\u2f1c"+
    "\0\u2f40\0\u2f64\0\u2f88\0\u2fac\0\u01f8\0\u2fd0\0\u2ff4\0\u3018"+
    "\0\u303c\0\u3060\0\110\0\u3084\0\u30a8\0\u30cc\0\u30f0\0\u3114"+
    "\0\u3138\0\u01f8\0\u315c\0\u3180\0\u31a4\0\u31c8\0\u31ec\0\110"+
    "\0\u3210\0\110\0\u3234\0\u3258\0\u327c\0\u01f8\0\u32a0\0\u01f8"+
    "\0\u32c4\0\u32e8\0\u330c\0\110\0\u3330\0\u3354\0\u3378\0\u01f8"+
    "\0\u339c\0\u33c0\0\u33e4\0\u3408\0\u342c\0\u3450\0\u3474\0\u3498"+
    "\0\u34bc\0\u34e0\0\u3504\0\u3528\0\u354c\0\110\0\u3570\0\u3594"+
    "\0\u01f8\0\u35b8\0\u35dc\0\u3600\0\u3624\0\u3648\0\u366c\0\110"+
    "\0\u3690\0\u01f8\0\u36b4\0\u36d8\0\u36fc\0\u3720\0\u3744\0\u3768"+
    "\0\u378c\0\u37b0\0\u37d4\0\u37f8\0\u381c\0\u3840\0\u3864\0\u3888"+
    "\0\110\0\u01f8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[442];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\3\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\25\3\1\20"+
    "\1\4\2\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\25\20\54\0\1\34"+
    "\22\0\1\35\33\0\1\36\52\0\1\37\34\0\1\40"+
    "\61\0\1\41\21\0\1\42\55\0\1\43\44\0\1\44"+
    "\34\0\1\45\10\0\1\46\35\0\1\47\3\0\1\50"+
    "\46\0\1\51\6\0\1\52\1\0\43\52\1\0\31\52"+
    "\1\53\11\52\1\0\21\52\1\54\21\52\1\0\30\52"+
    "\1\55\12\52\1\0\21\52\1\56\21\52\1\0\37\52"+
    "\1\57\3\52\1\0\15\52\1\60\25\52\1\0\27\52"+
    "\1\61\13\52\1\0\30\52\1\62\12\52\1\0\21\52"+
    "\1\63\10\52\1\64\10\52\1\0\24\52\1\65\3\52"+
    "\1\66\12\52\1\0\33\52\1\67\6\52\3\0\1\70"+
    "\57\0\1\71\55\0\1\72\43\0\1\73\47\0\1\74"+
    "\44\0\1\75\35\0\1\76\35\0\1\77\51\0\1\100"+
    "\5\0\1\101\41\0\1\102\32\0\1\103\6\0\1\104"+
    "\42\0\1\105\41\0\1\106\46\0\1\107\11\0\1\52"+
    "\1\0\15\52\1\110\25\52\1\0\27\52\1\111\13\52"+
    "\1\0\27\52\1\112\13\52\1\0\33\52\1\113\7\52"+
    "\1\0\34\52\1\114\6\52\1\0\26\52\1\115\14\52"+
    "\1\0\20\52\1\116\22\52\1\0\26\52\1\117\5\52"+
    "\1\120\6\52\1\0\32\52\1\121\10\52\1\0\21\52"+
    "\1\122\6\52\1\123\12\52\1\0\27\52\1\124\13\52"+
    "\1\0\25\52\1\125\15\52\1\0\30\52\1\126\11\52"+
    "\34\0\1\127\32\0\1\130\56\0\1\131\26\0\1\132"+
    "\56\0\1\133\35\0\1\134\43\0\1\135\35\0\1\136"+
    "\42\0\1\137\50\0\1\140\40\0\1\141\43\0\1\142"+
    "\11\0\1\143\33\0\1\144\57\0\1\145\7\0\1\146"+
    "\31\0\1\147\6\0\1\52\1\0\32\52\1\150\10\52"+
    "\1\0\21\52\1\151\21\52\1\0\34\52\1\152\6\52"+
    "\1\0\17\52\1\153\23\52\1\0\32\52\1\154\10\52"+
    "\1\0\24\52\1\155\16\52\1\0\24\52\1\156\16\52"+
    "\1\0\16\52\1\157\24\52\1\0\15\52\1\160\25\52"+
    "\1\0\22\52\1\161\20\52\1\0\17\52\1\162\23\52"+
    "\1\0\17\52\1\163\11\52\1\164\11\52\1\0\21\52"+
    "\1\165\21\52\1\0\35\52\1\166\5\52\1\0\1\52"+
    "\1\167\31\52\1\170\6\52\26\0\1\171\41\0\1\172"+
    "\53\0\1\173\43\0\1\174\26\0\1\175\53\0\1\176"+
    "\51\0\1\177\42\0\1\200\11\0\1\201\100\0\1\202"+
    "\23\0\1\203\47\0\1\204\46\0\1\205\51\0\1\206"+
    "\27\0\1\207\25\0\1\210\41\0\1\52\1\0\24\52"+
    "\1\211\16\52\1\0\22\52\1\212\20\52\1\0\32\52"+
    "\1\213\10\52\1\0\32\52\1\214\10\52\1\0\15\52"+
    "\1\215\25\52\1\0\25\52\1\216\15\52\1\0\33\52"+
    "\1\217\7\52\1\0\32\52\1\220\10\52\1\0\1\221"+
    "\42\52\1\0\35\52\1\222\5\52\1\0\15\52\1\223"+
    "\25\52\1\0\21\52\1\224\21\52\1\0\24\52\1\225"+
    "\16\52\1\0\32\52\1\226\10\52\1\0\16\52\1\227"+
    "\24\52\1\0\1\230\41\52\23\0\1\231\46\0\1\232"+
    "\34\0\1\233\52\0\1\234\36\0\1\235\50\0\1\236"+
    "\47\0\1\237\34\0\1\240\42\0\1\241\51\0\1\242"+
    "\52\0\1\243\26\0\1\244\44\0\1\245\45\0\1\246"+
    "\45\0\1\247\41\0\1\250\16\0\1\52\1\0\21\52"+
    "\1\251\21\52\1\0\24\52\1\252\16\52\1\0\15\52"+
    "\1\253\25\52\1\0\24\52\1\254\16\52\1\0\17\52"+
    "\1\255\23\52\1\0\24\52\1\256\16\52\1\0\30\52"+
    "\1\257\12\52\1\0\21\52\1\260\21\52\1\0\20\52"+
    "\1\261\22\52\1\0\26\52\1\262\14\52\1\0\35\52"+
    "\1\263\5\52\1\0\20\52\1\264\22\52\1\0\21\52"+
    "\1\265\21\52\1\0\23\52\1\266\17\52\1\0\25\52"+
    "\1\267\15\52\1\0\23\52\1\270\16\52\31\0\1\271"+
    "\33\0\1\272\50\0\1\273\50\0\1\274\31\0\1\275"+
    "\41\0\1\276\53\0\1\277\16\0\1\300\64\0\1\301"+
    "\43\0\1\302\41\0\1\303\45\0\1\304\42\0\1\305"+
    "\47\0\1\306\40\0\1\307\43\0\1\310\20\0\1\52"+
    "\1\0\27\52\1\311\13\52\1\0\17\52\1\312\23\52"+
    "\1\0\24\52\1\313\16\52\1\0\31\52\1\314\11\52"+
    "\1\0\17\52\1\315\23\52\1\0\15\52\1\316\25\52"+
    "\1\0\25\52\1\317\15\52\1\0\1\320\42\52\1\0"+
    "\21\52\1\321\21\52\1\0\21\52\1\322\21\52\1\0"+
    "\17\52\1\323\23\52\1\0\21\52\1\324\21\52\1\0"+
    "\20\52\1\325\22\52\1\0\24\52\1\326\16\52\1\0"+
    "\21\52\1\327\21\52\1\0\21\52\1\330\20\52\21\0"+
    "\1\331\50\0\1\332\46\0\1\333\33\0\1\334\50\0"+
    "\1\335\20\0\1\336\77\0\1\337\33\0\1\340\16\0"+
    "\1\341\44\0\1\342\66\0\1\343\46\0\1\344\31\0"+
    "\1\345\43\0\1\346\26\0\1\347\72\0\1\350\12\0"+
    "\1\52\1\0\17\52\1\351\23\52\1\0\24\52\1\352"+
    "\16\52\1\0\27\52\1\353\13\52\1\0\17\52\1\354"+
    "\23\52\1\0\24\52\1\355\16\52\1\0\1\52\1\356"+
    "\41\52\1\0\35\52\1\357\5\52\1\0\25\52\1\360"+
    "\15\52\1\0\1\361\42\52\1\0\1\52\1\362\41\52"+
    "\1\0\24\52\1\363\16\52\1\0\27\52\1\364\13\52"+
    "\1\0\15\52\1\365\25\52\1\0\15\52\1\366\25\52"+
    "\1\0\1\367\42\52\1\0\27\52\1\370\12\52\26\0"+
    "\1\371\47\0\1\372\33\0\1\373\47\0\1\374\57\0"+
    "\1\375\21\0\1\376\42\0\1\377\40\0\1\u0100\61\0"+
    "\1\u0101\32\0\1\u0102\44\0\1\u0103\24\0\1\u0104\63\0"+
    "\1\u0105\43\0\1\u0106\20\0\1\52\1\0\24\52\1\u0107"+
    "\16\52\1\0\30\52\1\u0108\12\52\1\0\20\52\1\u0109"+
    "\22\52\1\0\24\52\1\u010a\16\52\1\0\40\52\1\u010b"+
    "\2\52\1\0\16\52\1\u010c\24\52\1\0\15\52\1\u010d"+
    "\25\52\1\0\12\52\1\u010e\30\52\1\0\30\52\1\u010f"+
    "\12\52\1\0\17\52\1\u0110\23\52\1\0\20\52\1\u0111"+
    "\22\52\1\0\1\52\1\u0112\41\52\1\0\21\52\1\u0113"+
    "\21\52\1\0\21\52\1\u0114\20\52\17\0\1\u0115\61\0"+
    "\1\u0116\34\0\1\u0117\57\0\1\u0118\32\0\1\u0119\41\0"+
    "\1\u011a\52\0\1\u011b\30\0\1\u011c\51\0\1\u011d\40\0"+
    "\1\u011e\40\0\1\u011f\51\0\1\u0120\46\0\1\u0121\7\0"+
    "\1\52\1\0\15\52\1\u0122\25\52\1\0\33\52\1\u0123"+
    "\7\52\1\0\24\52\1\u0124\16\52\1\0\40\52\1\u0125"+
    "\2\52\1\0\27\52\1\u0126\13\52\1\0\25\52\1\u0127"+
    "\15\52\1\0\34\52\1\u0128\6\52\1\0\21\52\1\u0129"+
    "\21\52\1\0\27\52\1\u012a\13\52\1\0\24\52\1\u012b"+
    "\16\52\1\0\21\52\1\u012c\21\52\1\0\27\52\1\u012d"+
    "\13\52\1\0\32\52\1\u012e\7\52\3\0\1\u012f\42\0"+
    "\1\u0130\62\0\1\u0131\53\0\1\u0132\15\0\1\u0133\63\0"+
    "\1\u0134\46\0\1\u0135\51\0\1\u0136\32\0\1\u0137\37\0"+
    "\1\u0138\61\0\1\u0139\11\0\1\u013a\57\0\1\u013b\24\0"+
    "\1\52\1\0\1\52\1\u013c\41\52\1\0\1\u013d\42\52"+
    "\1\0\17\52\1\u013e\23\52\1\0\27\52\1\u013f\13\52"+
    "\1\0\1\52\1\u0140\41\52\1\0\21\52\1\u0141\21\52"+
    "\1\0\24\52\1\u0142\16\52\1\0\32\52\1\u0143\10\52"+
    "\1\0\21\52\1\u0144\21\52\1\0\15\52\1\u0145\25\52"+
    "\1\0\33\52\1\u0146\7\52\1\0\1\52\1\u0147\41\52"+
    "\1\0\15\52\1\u0148\24\52\4\0\1\u0149\56\0\1\u014a"+
    "\26\0\1\u014b\1\u014c\42\0\1\u014d\72\0\1\u014e\36\0"+
    "\1\u014f\54\0\1\u0150\11\0\1\u0151\43\0\1\u0152\67\0"+
    "\1\u0153\14\0\1\52\1\0\2\52\1\u0154\40\52\1\0"+
    "\15\52\1\u0155\25\52\1\0\1\u0156\1\u0157\41\52\1\0"+
    "\1\u0158\42\52\1\0\27\52\1\u0159\13\52\1\0\22\52"+
    "\1\u015a\20\52\1\0\33\52\1\u015b\7\52\1\0\1\52"+
    "\1\u015c\41\52\1\0\1\52\1\u015d\41\52\1\0\25\52"+
    "\1\u015e\14\52\34\0\1\u015f\30\0\1\u0160\54\0\1\u0161"+
    "\34\0\1\u0162\52\0\1\u0163\50\0\1\u0164\7\0\1\u0165"+
    "\63\0\1\u0166\20\0\1\52\1\0\32\52\1\u0167\10\52"+
    "\1\0\17\52\1\u0168\23\52\1\0\30\52\1\u0169\12\52"+
    "\1\0\21\52\1\u016a\21\52\1\0\30\52\1\u016b\12\52"+
    "\1\0\35\52\1\u016c\5\52\1\0\1\52\1\u016d\41\52"+
    "\1\0\21\52\1\u016e\20\52\32\0\1\u016f\37\0\1\u0170"+
    "\44\0\1\u0171\45\0\1\u0172\15\0\1\u0173\70\0\1\u0174"+
    "\50\0\1\u0175\6\0\1\52\1\0\30\52\1\u0176\12\52"+
    "\1\0\24\52\1\u0177\16\52\1\0\25\52\1\u0178\15\52"+
    "\1\0\27\52\1\u0179\13\52\1\0\1\52\1\u017a\41\52"+
    "\1\0\26\52\1\u017b\14\52\1\0\33\52\1\u017c\6\52"+
    "\30\0\1\u017d\45\0\1\u017e\35\0\1\u017f\22\0\1\u0180"+
    "\63\0\1\u0181\23\0\1\u0182\40\0\1\52\1\0\26\52"+
    "\1\u0183\14\52\1\0\30\52\1\u0184\12\52\1\0\22\52"+
    "\1\u0185\20\52\1\0\1\52\1\u0186\41\52\1\0\21\52"+
    "\1\u0187\21\52\1\0\1\52\1\u0188\40\52\17\0\1\u0189"+
    "\55\0\1\u018a\31\0\1\u018b\27\0\1\u018c\40\0\1\52"+
    "\1\0\15\52\1\u018d\25\52\1\0\27\52\1\u018e\13\52"+
    "\1\0\15\52\1\u018f\25\52\1\0\1\52\1\u0190\40\52"+
    "\36\0\1\u0191\30\0\1\u0192\56\0\1\u0193\5\0\1\52"+
    "\1\0\34\52\1\u0194\6\52\1\0\21\52\1\u0195\21\52"+
    "\1\0\34\52\1\u0196\5\52\23\0\1\u0197\55\0\1\u0198"+
    "\34\0\1\u0199\15\0\1\52\1\0\21\52\1\u019a\21\52"+
    "\1\0\33\52\1\u019b\7\52\1\0\24\52\1\u019c\15\52"+
    "\34\0\1\u019d\12\0\1\u019e\100\0\1\u019f\3\0\1\52"+
    "\1\0\32\52\1\u01a0\10\52\1\0\1\52\1\u01a1\41\52"+
    "\1\0\36\52\1\u01a2\3\52\17\0\1\u01a3\43\0\1\u01a4"+
    "\24\0\1\52\1\0\15\52\1\u01a5\25\52\1\0\15\52"+
    "\1\u01a6\24\52\33\0\1\u01a7\13\0\1\u01a8\40\0\1\52"+
    "\1\0\31\52\1\u01a9\11\52\1\0\1\52\1\u01aa\40\52"+
    "\23\0\1\u01ab\20\0\1\52\1\0\21\52\1\u01ac\20\52"+
    "\43\0\1\u01ad\1\52\1\0\41\52\1\u01ae\36\0\1\u01af"+
    "\5\0\1\52\1\0\34\52\1\u01b0\5\52\26\0\1\u01b1"+
    "\15\0\1\52\1\0\24\52\1\u01b2\15\52\21\0\1\u01b3"+
    "\22\0\1\52\1\0\17\52\1\u01b4\22\52\32\0\1\u01b5"+
    "\11\0\1\52\1\0\30\52\1\u01b6\11\52\35\0\1\u01b7"+
    "\6\0\1\52\1\0\33\52\1\u01b8\6\52\3\0\1\u01b9"+
    "\40\0\1\52\1\0\1\52\1\u01ba\40\52";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14508];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\2\11\27\1\16\0\16\1\1\11\17\0"+
    "\17\1\17\0\1\11\1\0\21\1\20\0\20\1\20\0"+
    "\20\1\20\0\20\1\5\0\1\11\3\0\1\11\6\0"+
    "\20\1\13\0\1\11\2\0\16\1\15\0\15\1\1\11"+
    "\3\0\1\11\6\0\1\11\1\0\15\1\3\0\1\11"+
    "\4\0\2\11\1\0\13\1\6\0\1\11\1\0\10\1"+
    "\4\0\1\11\2\0\7\1\3\0\1\11\1\0\1\11"+
    "\6\1\3\0\1\11\4\1\3\0\3\1\3\0\3\1"+
    "\1\0\1\11\1\0\3\1\2\0\2\1\1\0\1\11"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[442];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AE(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { //System.out.print("|" + yytext() + "|");
	yybegin(A);
	return new Symbol(sym.DATOS, new String(yytext().replace("\n","")));
            }
            // fall through
          case 23: break;
          case 2:
            { //System.out.print(yytext());
	return new Symbol(sym.DATOS_QUE_NO_SE_USA);
            }
            // fall through
          case 24: break;
          case 3:
            { System.out.print(yytext());
            }
            // fall through
          case 25: break;
          case 4:
            { //System.out.print(yytext());
	yybegin(B);
	return new Symbol(sym.AE);
            }
            // fall through
          case 26: break;
          case 5:
            { //System.out.print(yytext());
	yybegin(B);
	return new Symbol(sym.USO);
            }
            // fall through
          case 27: break;
          case 6:
            { //System.out.print(yytext());
	yybegin(B);
	return new Symbol(sym.FAMILIA);
            }
            // fall through
          case 28: break;
          case 7:
            { //System.out.print(yytext());
	yybegin(B);
	return new Symbol(sym.PERFUME);
            }
            // fall through
          case 29: break;
          case 8:
            { //System.out.print(yytext());
	yybegin(B);
	return new Symbol(sym.SINERGIA);
            }
            // fall through
          case 30: break;
          case 9:
            { //System.out.print(yytext());
	yybegin(B);
	return new Symbol(sym.APARIENCIA);
            }
            // fall through
          case 31: break;
          case 10:
            { //System.out.print(yytext());
	yybegin(B);
	return new Symbol(sym.EXTRACCION);
            }
            // fall through
          case 32: break;
          case 11:
            { //System.out.print(yytext());
	yybegin(B);
	return new Symbol(sym.SOLUBLE_EN);
            }
            // fall through
          case 33: break;
          case 12:
            { //System.out.print(yytext());
	yybegin(B);
	return new Symbol(sym.DESCRIPCION);
            }
            // fall through
          case 34: break;
          case 13:
            { //System.out.print(yytext());
	yybegin(B);
	return new Symbol(sym.PROCEDENCIA);
            }
            // fall through
          case 35: break;
          case 14:
            { //System.out.print(yytext());
	yybegin(B);
	return new Symbol(sym.PROPIEDADES);
            }
            // fall through
          case 36: break;
          case 15:
            { //System.out.print(yytext());
	yybegin(B);
	return new Symbol(sym.PRECAUCIONES);
            }
            // fall through
          case 37: break;
          case 16:
            { //System.out.print(yytext());
	yybegin(B);
	return new Symbol(sym.NOMBRE_LATINO);
            }
            // fall through
          case 38: break;
          case 17:
            { //System.out.print(yytext());
	yybegin(B);
	return new Symbol(sym.INDISOLUBLE_EN);
            }
            // fall through
          case 39: break;
          case 18:
            { //System.out.print(yytext());
	yybegin(B);
	return new Symbol(sym.USOS_GENERALES);
            }
            // fall through
          case 40: break;
          case 19:
            { //System.out.print(yytext());
	yybegin(B);
	return new Symbol(sym.NOTA_DE_PERFUME);
            }
            // fall through
          case 41: break;
          case 20:
            { //System.out.print(yytext());
	yybegin(B);
	return new Symbol(sym.CONTRAINDICACIONES);
            }
            // fall through
          case 42: break;
          case 21:
            { //System.out.print(yytext());
	yybegin(B);
	return new Symbol(sym.DESCRIPCION_OLFATIVA);
            }
            // fall through
          case 43: break;
          case 22:
            { //System.out.print(yytext());
	yybegin(B);
	return new Symbol(sym.BENEFICIOS_AROMATERAPEUTICOS);
            }
            // fall through
          case 44: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java AE [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AE scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AE(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
